{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Email Inbox Folders\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.folderIds, folderId => {\n    return _openBlock(), _createBlock(_component_router_link, {\n      to: '/emails/' + folderId,\n      key: folderId\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(folderId), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\"]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","folderIds","folderId","_createBlock","_component_router_link","to","key","default","_withCtx","_createTextVNode","_toDisplayString","_"],"sources":["C:\\Users\\Abha Agrawal\\Desktop\\outlook add-in\\frontend\\src\\components\\InboxFolders.vue"],"sourcesContent":["<!-- InboxFolders.vue -->\r\n<template>\r\n  <div>\r\n    <h2>Email Inbox Folders</h2>\r\n    <router-link :to=\"'/emails/' + folderId\" v-for=\"folderId in folderIds\" :key=\"folderId\">\r\n      {{ folderId }}\r\n    </router-link>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      folderIds: [], // Assuming this will be populated with actual inbox folder IDs\r\n    };\r\n  },\r\n  created() {\r\n    // Fetch inbox folder IDs when the component is created\r\n    this.fetchInboxFolders();\r\n  },\r\n  methods: {\r\n   async fetchInboxFolders() {\r\n  try {\r\n    const response = await this.$axios.get('https://graph.microsoft.com/me/mailFolders');\r\n    this.folderIds = response.data.value.map(folder => folder.id);\r\n  } catch (error) {\r\n    console.error('Error fetching inbox folders:', error);\r\n  }\r\n  },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Add your component styles here */\r\n</style>\r\n"],"mappings":";gCAGIA,mBAAA,CAA4B,YAAxB,qBAAmB;;;uBADzBC,mBAAA,CAKM,cAJJC,UAA4B,G,kBAC5BD,mBAAA,CAEcE,SAAA,QANlBC,WAAA,CAIgEC,KAAA,CAAAC,SAAS,EAArBC,QAAQ;yBAAxDC,YAAA,CAEcC,sBAAA;MAFAC,EAAE,eAAeH,QAAQ;MAAiCI,GAAG,EAAEJ;;MAJjFK,OAAA,EAAAC,QAAA,CAKM,MAAc,CALpBC,gBAAA,CAAAC,gBAAA,CAKSR,QAAQ,iB;MALjBS,CAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}